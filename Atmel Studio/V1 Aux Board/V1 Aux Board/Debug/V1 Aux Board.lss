
V1 Aux Board.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000420  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003cc  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000420  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000450  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000a8  00000000  00000000  00000490  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000bee  00000000  00000000  00000538  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000895  00000000  00000000  00001126  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000578  00000000  00000000  000019bb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000d8  00000000  00000000  00001f34  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004b2  00000000  00000000  0000200c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000028c  00000000  00000000  000024be  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  0000274a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 8c 00 	call	0x118	; 0x118 <main>
  78:	0c 94 e4 01 	jmp	0x3c8	; 0x3c8 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <writeEEPROM>:
//gets the output current in milliAmps (same idea as getVoltage)
double getCurrent(void){
	
	double current;

	current = (double) ADCRead((uint8_t) 0x0);  //Current reading is on ADC0
  80:	cf 92       	push	r12
  82:	df 92       	push	r13
  84:	ef 92       	push	r14
  86:	ff 92       	push	r15
  88:	cf 93       	push	r28
  8a:	df 93       	push	r29
  8c:	ec 01       	movw	r28, r24
  8e:	6a 01       	movw	r12, r20
  90:	7b 01       	movw	r14, r22
  92:	20 e0       	ldi	r18, 0x00	; 0
  94:	3f ef       	ldi	r19, 0xFF	; 255
  96:	4f e7       	ldi	r20, 0x7F	; 127
  98:	57 e4       	ldi	r21, 0x47	; 71
  9a:	c7 01       	movw	r24, r14
  9c:	b6 01       	movw	r22, r12
  9e:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <__gesf2>
  a2:	18 16       	cp	r1, r24
  a4:	4c f4       	brge	.+18     	; 0xb8 <writeEEPROM+0x38>
  a6:	0f 2e       	mov	r0, r31
  a8:	c1 2c       	mov	r12, r1
  aa:	dd 24       	eor	r13, r13
  ac:	da 94       	dec	r13
  ae:	ff e7       	ldi	r31, 0x7F	; 127
  b0:	ef 2e       	mov	r14, r31
  b2:	f7 e4       	ldi	r31, 0x47	; 71
  b4:	ff 2e       	mov	r15, r31
  b6:	f0 2d       	mov	r31, r0
  b8:	c7 01       	movw	r24, r14
  ba:	b6 01       	movw	r22, r12
  bc:	0e 94 60 01 	call	0x2c0	; 0x2c0 <round>
  c0:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
  c4:	ce 01       	movw	r24, r28
  c6:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <eeprom_write_word>
  ca:	df 91       	pop	r29
  cc:	cf 91       	pop	r28
  ce:	ff 90       	pop	r15
  d0:	ef 90       	pop	r14
  d2:	df 90       	pop	r13
  d4:	cf 90       	pop	r12
  d6:	08 95       	ret

000000d8 <ADCRead>:
  d8:	e4 e6       	ldi	r30, 0x64	; 100
  da:	f0 e0       	ldi	r31, 0x00	; 0
  dc:	90 81       	ld	r25, Z
  de:	9e 7f       	andi	r25, 0xFE	; 254
  e0:	90 83       	st	Z, r25
  e2:	eb e7       	ldi	r30, 0x7B	; 123
  e4:	f0 e0       	ldi	r31, 0x00	; 0
  e6:	90 81       	ld	r25, Z
  e8:	10 82       	st	Z, r1
  ea:	ea e7       	ldi	r30, 0x7A	; 122
  ec:	f0 e0       	ldi	r31, 0x00	; 0
  ee:	90 81       	ld	r25, Z
  f0:	9f 6a       	ori	r25, 0xAF	; 175
  f2:	90 83       	st	Z, r25
  f4:	ac e7       	ldi	r26, 0x7C	; 124
  f6:	b0 e0       	ldi	r27, 0x00	; 0
  f8:	9c 91       	ld	r25, X
  fa:	90 64       	ori	r25, 0x40	; 64
  fc:	9c 93       	st	X, r25
  fe:	9c 91       	ld	r25, X
 100:	89 2b       	or	r24, r25
 102:	8c 93       	st	X, r24
 104:	80 81       	ld	r24, Z
 106:	80 64       	ori	r24, 0x40	; 64
 108:	80 83       	st	Z, r24
 10a:	80 81       	ld	r24, Z
 10c:	fe cf       	rjmp	.-4      	; 0x10a <ADCRead+0x32>

0000010e <getVoltage>:
 10e:	81 e0       	ldi	r24, 0x01	; 1
 110:	0e 94 6c 00 	call	0xd8	; 0xd8 <ADCRead>

00000114 <getPower>:
//Currently doesn't include losses in pMOSs and battery
double getPower(void){
	
	double power;
	
	power = getVoltage() * getCurrent(); //outputs in milliwatts. 
 114:	0e 94 87 00 	call	0x10e	; 0x10e <getVoltage>

00000118 <main>:

// V1 is in Alpha. Code is incomplete.


int main(void)
{
 118:	cf 92       	push	r12
 11a:	df 92       	push	r13
 11c:	ef 92       	push	r14
 11e:	ff 92       	push	r15
 120:	cf 93       	push	r28
 122:	df 93       	push	r29
	SREG |= 10000000; //Enable global interrupts. 
 124:	8f b7       	in	r24, 0x3f	; 63
 126:	80 68       	ori	r24, 0x80	; 128
 128:	8f bf       	out	0x3f, r24	; 63

	double powerout_buffer;
	uint16_t powerout = 0x0;
	uint16_t * i = 0x0;      //indexing variable
	
	for (i = 0; i < ( (uint16_t*) 1024 ) ; i = i + 2){ // We got 1K EEPROM. So for a double thats 4bytes, therefore we have 128 spots. 
 12a:	c0 e0       	ldi	r28, 0x00	; 0
 12c:	d0 e0       	ldi	r29, 0x00	; 0
													  // But we going to store as uint16 to get 512 spots. 16bits is good for mW value.
		powerout_buffer = getPower();   //load the power usage of the device in mW
 12e:	0e 94 8a 00 	call	0x114	; 0x114 <getPower>
 132:	6b 01       	movw	r12, r22
 134:	7c 01       	movw	r14, r24
		if ( powerout_buffer >= TWOE16 ){ //if this value is more than 2^16 milliwatts, theres a problem
 136:	20 e0       	ldi	r18, 0x00	; 0
 138:	3f ef       	ldi	r19, 0xFF	; 255
 13a:	4f e7       	ldi	r20, 0x7F	; 127
 13c:	57 e4       	ldi	r21, 0x47	; 71
 13e:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <__gesf2>
 142:	88 23       	and	r24, r24
 144:	d4 f4       	brge	.+52     	; 0x17a <main+0x62>
			return 0;                         //MAX wattage of the device is far less than 65W
		}
		else{

			powerout = (uint16_t) round(powerout_buffer); //transfer the double value to a uint16_t type
 146:	c7 01       	movw	r24, r14
 148:	b6 01       	movw	r22, r12
 14a:	0e 94 60 01 	call	0x2c0	; 0x2c0 <round>
 14e:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
		
		}

		writeEEPROM( i, powerout);   // Write this value to the EEPROM to read later.
 152:	80 e0       	ldi	r24, 0x00	; 0
 154:	90 e0       	ldi	r25, 0x00	; 0
 156:	0e 94 f5 00 	call	0x1ea	; 0x1ea <__floatunsisf>
 15a:	ab 01       	movw	r20, r22
 15c:	bc 01       	movw	r22, r24
 15e:	ce 01       	movw	r24, r28
 160:	0e 94 40 00 	call	0x80	; 0x80 <writeEEPROM>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 164:	8f e4       	ldi	r24, 0x4F	; 79
 166:	93 ec       	ldi	r25, 0xC3	; 195
 168:	01 97       	sbiw	r24, 0x01	; 1
 16a:	f1 f7       	brne	.-4      	; 0x168 <main+0x50>
 16c:	00 c0       	rjmp	.+0      	; 0x16e <main+0x56>
 16e:	00 00       	nop

	double powerout_buffer;
	uint16_t powerout = 0x0;
	uint16_t * i = 0x0;      //indexing variable
	
	for (i = 0; i < ( (uint16_t*) 1024 ) ; i = i + 2){ // We got 1K EEPROM. So for a double thats 4bytes, therefore we have 128 spots. 
 170:	24 96       	adiw	r28, 0x04	; 4
 172:	c1 15       	cp	r28, r1
 174:	94 e0       	ldi	r25, 0x04	; 4
 176:	d9 07       	cpc	r29, r25
 178:	d1 f6       	brne	.-76     	; 0x12e <main+0x16>
									 // Delay * 512 gives us the approximate sampling time in ms
	}
	
	
	return 0;
}
 17a:	80 e0       	ldi	r24, 0x00	; 0
 17c:	90 e0       	ldi	r25, 0x00	; 0
 17e:	df 91       	pop	r29
 180:	cf 91       	pop	r28
 182:	ff 90       	pop	r15
 184:	ef 90       	pop	r14
 186:	df 90       	pop	r13
 188:	cf 90       	pop	r12
 18a:	08 95       	ret

0000018c <__fixunssfsi>:
 18c:	0e 94 3a 01 	call	0x274	; 0x274 <__fp_splitA>
 190:	88 f0       	brcs	.+34     	; 0x1b4 <__fixunssfsi+0x28>
 192:	9f 57       	subi	r25, 0x7F	; 127
 194:	98 f0       	brcs	.+38     	; 0x1bc <__fixunssfsi+0x30>
 196:	b9 2f       	mov	r27, r25
 198:	99 27       	eor	r25, r25
 19a:	b7 51       	subi	r27, 0x17	; 23
 19c:	b0 f0       	brcs	.+44     	; 0x1ca <__fixunssfsi+0x3e>
 19e:	e1 f0       	breq	.+56     	; 0x1d8 <__fixunssfsi+0x4c>
 1a0:	66 0f       	add	r22, r22
 1a2:	77 1f       	adc	r23, r23
 1a4:	88 1f       	adc	r24, r24
 1a6:	99 1f       	adc	r25, r25
 1a8:	1a f0       	brmi	.+6      	; 0x1b0 <__fixunssfsi+0x24>
 1aa:	ba 95       	dec	r27
 1ac:	c9 f7       	brne	.-14     	; 0x1a0 <__fixunssfsi+0x14>
 1ae:	14 c0       	rjmp	.+40     	; 0x1d8 <__fixunssfsi+0x4c>
 1b0:	b1 30       	cpi	r27, 0x01	; 1
 1b2:	91 f0       	breq	.+36     	; 0x1d8 <__fixunssfsi+0x4c>
 1b4:	0e 94 54 01 	call	0x2a8	; 0x2a8 <__fp_zero>
 1b8:	b1 e0       	ldi	r27, 0x01	; 1
 1ba:	08 95       	ret
 1bc:	0c 94 54 01 	jmp	0x2a8	; 0x2a8 <__fp_zero>
 1c0:	67 2f       	mov	r22, r23
 1c2:	78 2f       	mov	r23, r24
 1c4:	88 27       	eor	r24, r24
 1c6:	b8 5f       	subi	r27, 0xF8	; 248
 1c8:	39 f0       	breq	.+14     	; 0x1d8 <__fixunssfsi+0x4c>
 1ca:	b9 3f       	cpi	r27, 0xF9	; 249
 1cc:	cc f3       	brlt	.-14     	; 0x1c0 <__fixunssfsi+0x34>
 1ce:	86 95       	lsr	r24
 1d0:	77 95       	ror	r23
 1d2:	67 95       	ror	r22
 1d4:	b3 95       	inc	r27
 1d6:	d9 f7       	brne	.-10     	; 0x1ce <__fixunssfsi+0x42>
 1d8:	3e f4       	brtc	.+14     	; 0x1e8 <__fixunssfsi+0x5c>
 1da:	90 95       	com	r25
 1dc:	80 95       	com	r24
 1de:	70 95       	com	r23
 1e0:	61 95       	neg	r22
 1e2:	7f 4f       	sbci	r23, 0xFF	; 255
 1e4:	8f 4f       	sbci	r24, 0xFF	; 255
 1e6:	9f 4f       	sbci	r25, 0xFF	; 255
 1e8:	08 95       	ret

000001ea <__floatunsisf>:
 1ea:	e8 94       	clt
 1ec:	09 c0       	rjmp	.+18     	; 0x200 <__floatsisf+0x12>

000001ee <__floatsisf>:
 1ee:	97 fb       	bst	r25, 7
 1f0:	3e f4       	brtc	.+14     	; 0x200 <__floatsisf+0x12>
 1f2:	90 95       	com	r25
 1f4:	80 95       	com	r24
 1f6:	70 95       	com	r23
 1f8:	61 95       	neg	r22
 1fa:	7f 4f       	sbci	r23, 0xFF	; 255
 1fc:	8f 4f       	sbci	r24, 0xFF	; 255
 1fe:	9f 4f       	sbci	r25, 0xFF	; 255
 200:	99 23       	and	r25, r25
 202:	a9 f0       	breq	.+42     	; 0x22e <__floatsisf+0x40>
 204:	f9 2f       	mov	r31, r25
 206:	96 e9       	ldi	r25, 0x96	; 150
 208:	bb 27       	eor	r27, r27
 20a:	93 95       	inc	r25
 20c:	f6 95       	lsr	r31
 20e:	87 95       	ror	r24
 210:	77 95       	ror	r23
 212:	67 95       	ror	r22
 214:	b7 95       	ror	r27
 216:	f1 11       	cpse	r31, r1
 218:	f8 cf       	rjmp	.-16     	; 0x20a <__floatsisf+0x1c>
 21a:	fa f4       	brpl	.+62     	; 0x25a <__floatsisf+0x6c>
 21c:	bb 0f       	add	r27, r27
 21e:	11 f4       	brne	.+4      	; 0x224 <__floatsisf+0x36>
 220:	60 ff       	sbrs	r22, 0
 222:	1b c0       	rjmp	.+54     	; 0x25a <__floatsisf+0x6c>
 224:	6f 5f       	subi	r22, 0xFF	; 255
 226:	7f 4f       	sbci	r23, 0xFF	; 255
 228:	8f 4f       	sbci	r24, 0xFF	; 255
 22a:	9f 4f       	sbci	r25, 0xFF	; 255
 22c:	16 c0       	rjmp	.+44     	; 0x25a <__floatsisf+0x6c>
 22e:	88 23       	and	r24, r24
 230:	11 f0       	breq	.+4      	; 0x236 <__floatsisf+0x48>
 232:	96 e9       	ldi	r25, 0x96	; 150
 234:	11 c0       	rjmp	.+34     	; 0x258 <__floatsisf+0x6a>
 236:	77 23       	and	r23, r23
 238:	21 f0       	breq	.+8      	; 0x242 <__floatsisf+0x54>
 23a:	9e e8       	ldi	r25, 0x8E	; 142
 23c:	87 2f       	mov	r24, r23
 23e:	76 2f       	mov	r23, r22
 240:	05 c0       	rjmp	.+10     	; 0x24c <__floatsisf+0x5e>
 242:	66 23       	and	r22, r22
 244:	71 f0       	breq	.+28     	; 0x262 <__floatsisf+0x74>
 246:	96 e8       	ldi	r25, 0x86	; 134
 248:	86 2f       	mov	r24, r22
 24a:	70 e0       	ldi	r23, 0x00	; 0
 24c:	60 e0       	ldi	r22, 0x00	; 0
 24e:	2a f0       	brmi	.+10     	; 0x25a <__floatsisf+0x6c>
 250:	9a 95       	dec	r25
 252:	66 0f       	add	r22, r22
 254:	77 1f       	adc	r23, r23
 256:	88 1f       	adc	r24, r24
 258:	da f7       	brpl	.-10     	; 0x250 <__floatsisf+0x62>
 25a:	88 0f       	add	r24, r24
 25c:	96 95       	lsr	r25
 25e:	87 95       	ror	r24
 260:	97 f9       	bld	r25, 7
 262:	08 95       	ret

00000264 <__fp_split3>:
 264:	57 fd       	sbrc	r21, 7
 266:	90 58       	subi	r25, 0x80	; 128
 268:	44 0f       	add	r20, r20
 26a:	55 1f       	adc	r21, r21
 26c:	59 f0       	breq	.+22     	; 0x284 <__fp_splitA+0x10>
 26e:	5f 3f       	cpi	r21, 0xFF	; 255
 270:	71 f0       	breq	.+28     	; 0x28e <__fp_splitA+0x1a>
 272:	47 95       	ror	r20

00000274 <__fp_splitA>:
 274:	88 0f       	add	r24, r24
 276:	97 fb       	bst	r25, 7
 278:	99 1f       	adc	r25, r25
 27a:	61 f0       	breq	.+24     	; 0x294 <__fp_splitA+0x20>
 27c:	9f 3f       	cpi	r25, 0xFF	; 255
 27e:	79 f0       	breq	.+30     	; 0x29e <__fp_splitA+0x2a>
 280:	87 95       	ror	r24
 282:	08 95       	ret
 284:	12 16       	cp	r1, r18
 286:	13 06       	cpc	r1, r19
 288:	14 06       	cpc	r1, r20
 28a:	55 1f       	adc	r21, r21
 28c:	f2 cf       	rjmp	.-28     	; 0x272 <__fp_split3+0xe>
 28e:	46 95       	lsr	r20
 290:	f1 df       	rcall	.-30     	; 0x274 <__fp_splitA>
 292:	08 c0       	rjmp	.+16     	; 0x2a4 <__fp_splitA+0x30>
 294:	16 16       	cp	r1, r22
 296:	17 06       	cpc	r1, r23
 298:	18 06       	cpc	r1, r24
 29a:	99 1f       	adc	r25, r25
 29c:	f1 cf       	rjmp	.-30     	; 0x280 <__fp_splitA+0xc>
 29e:	86 95       	lsr	r24
 2a0:	71 05       	cpc	r23, r1
 2a2:	61 05       	cpc	r22, r1
 2a4:	08 94       	sec
 2a6:	08 95       	ret

000002a8 <__fp_zero>:
 2a8:	e8 94       	clt

000002aa <__fp_szero>:
 2aa:	bb 27       	eor	r27, r27
 2ac:	66 27       	eor	r22, r22
 2ae:	77 27       	eor	r23, r23
 2b0:	cb 01       	movw	r24, r22
 2b2:	97 f9       	bld	r25, 7
 2b4:	08 95       	ret

000002b6 <__gesf2>:
 2b6:	0e 94 84 01 	call	0x308	; 0x308 <__fp_cmp>
 2ba:	08 f4       	brcc	.+2      	; 0x2be <__gesf2+0x8>
 2bc:	8f ef       	ldi	r24, 0xFF	; 255
 2be:	08 95       	ret

000002c0 <round>:
 2c0:	0e 94 3a 01 	call	0x274	; 0x274 <__fp_splitA>
 2c4:	e8 f0       	brcs	.+58     	; 0x300 <round+0x40>
 2c6:	9e 37       	cpi	r25, 0x7E	; 126
 2c8:	e8 f0       	brcs	.+58     	; 0x304 <round+0x44>
 2ca:	96 39       	cpi	r25, 0x96	; 150
 2cc:	b8 f4       	brcc	.+46     	; 0x2fc <round+0x3c>
 2ce:	9e 38       	cpi	r25, 0x8E	; 142
 2d0:	48 f4       	brcc	.+18     	; 0x2e4 <round+0x24>
 2d2:	67 2f       	mov	r22, r23
 2d4:	78 2f       	mov	r23, r24
 2d6:	88 27       	eor	r24, r24
 2d8:	98 5f       	subi	r25, 0xF8	; 248
 2da:	f9 cf       	rjmp	.-14     	; 0x2ce <round+0xe>
 2dc:	86 95       	lsr	r24
 2de:	77 95       	ror	r23
 2e0:	67 95       	ror	r22
 2e2:	93 95       	inc	r25
 2e4:	95 39       	cpi	r25, 0x95	; 149
 2e6:	d0 f3       	brcs	.-12     	; 0x2dc <round+0x1c>
 2e8:	b6 2f       	mov	r27, r22
 2ea:	b1 70       	andi	r27, 0x01	; 1
 2ec:	6b 0f       	add	r22, r27
 2ee:	71 1d       	adc	r23, r1
 2f0:	81 1d       	adc	r24, r1
 2f2:	20 f4       	brcc	.+8      	; 0x2fc <round+0x3c>
 2f4:	87 95       	ror	r24
 2f6:	77 95       	ror	r23
 2f8:	67 95       	ror	r22
 2fa:	93 95       	inc	r25
 2fc:	0c 94 a8 01 	jmp	0x350	; 0x350 <__fp_mintl>
 300:	0c 94 c3 01 	jmp	0x386	; 0x386 <__fp_mpack>
 304:	0c 94 55 01 	jmp	0x2aa	; 0x2aa <__fp_szero>

00000308 <__fp_cmp>:
 308:	99 0f       	add	r25, r25
 30a:	00 08       	sbc	r0, r0
 30c:	55 0f       	add	r21, r21
 30e:	aa 0b       	sbc	r26, r26
 310:	e0 e8       	ldi	r30, 0x80	; 128
 312:	fe ef       	ldi	r31, 0xFE	; 254
 314:	16 16       	cp	r1, r22
 316:	17 06       	cpc	r1, r23
 318:	e8 07       	cpc	r30, r24
 31a:	f9 07       	cpc	r31, r25
 31c:	c0 f0       	brcs	.+48     	; 0x34e <__fp_cmp+0x46>
 31e:	12 16       	cp	r1, r18
 320:	13 06       	cpc	r1, r19
 322:	e4 07       	cpc	r30, r20
 324:	f5 07       	cpc	r31, r21
 326:	98 f0       	brcs	.+38     	; 0x34e <__fp_cmp+0x46>
 328:	62 1b       	sub	r22, r18
 32a:	73 0b       	sbc	r23, r19
 32c:	84 0b       	sbc	r24, r20
 32e:	95 0b       	sbc	r25, r21
 330:	39 f4       	brne	.+14     	; 0x340 <__fp_cmp+0x38>
 332:	0a 26       	eor	r0, r26
 334:	61 f0       	breq	.+24     	; 0x34e <__fp_cmp+0x46>
 336:	23 2b       	or	r18, r19
 338:	24 2b       	or	r18, r20
 33a:	25 2b       	or	r18, r21
 33c:	21 f4       	brne	.+8      	; 0x346 <__fp_cmp+0x3e>
 33e:	08 95       	ret
 340:	0a 26       	eor	r0, r26
 342:	09 f4       	brne	.+2      	; 0x346 <__fp_cmp+0x3e>
 344:	a1 40       	sbci	r26, 0x01	; 1
 346:	a6 95       	lsr	r26
 348:	8f ef       	ldi	r24, 0xFF	; 255
 34a:	81 1d       	adc	r24, r1
 34c:	81 1d       	adc	r24, r1
 34e:	08 95       	ret

00000350 <__fp_mintl>:
 350:	88 23       	and	r24, r24
 352:	71 f4       	brne	.+28     	; 0x370 <__fp_mintl+0x20>
 354:	77 23       	and	r23, r23
 356:	21 f0       	breq	.+8      	; 0x360 <__fp_mintl+0x10>
 358:	98 50       	subi	r25, 0x08	; 8
 35a:	87 2b       	or	r24, r23
 35c:	76 2f       	mov	r23, r22
 35e:	07 c0       	rjmp	.+14     	; 0x36e <__fp_mintl+0x1e>
 360:	66 23       	and	r22, r22
 362:	11 f4       	brne	.+4      	; 0x368 <__fp_mintl+0x18>
 364:	99 27       	eor	r25, r25
 366:	0d c0       	rjmp	.+26     	; 0x382 <__fp_mintl+0x32>
 368:	90 51       	subi	r25, 0x10	; 16
 36a:	86 2b       	or	r24, r22
 36c:	70 e0       	ldi	r23, 0x00	; 0
 36e:	60 e0       	ldi	r22, 0x00	; 0
 370:	2a f0       	brmi	.+10     	; 0x37c <__fp_mintl+0x2c>
 372:	9a 95       	dec	r25
 374:	66 0f       	add	r22, r22
 376:	77 1f       	adc	r23, r23
 378:	88 1f       	adc	r24, r24
 37a:	da f7       	brpl	.-10     	; 0x372 <__fp_mintl+0x22>
 37c:	88 0f       	add	r24, r24
 37e:	96 95       	lsr	r25
 380:	87 95       	ror	r24
 382:	97 f9       	bld	r25, 7
 384:	08 95       	ret

00000386 <__fp_mpack>:
 386:	9f 3f       	cpi	r25, 0xFF	; 255
 388:	31 f0       	breq	.+12     	; 0x396 <__fp_mpack_finite+0xc>

0000038a <__fp_mpack_finite>:
 38a:	91 50       	subi	r25, 0x01	; 1
 38c:	20 f4       	brcc	.+8      	; 0x396 <__fp_mpack_finite+0xc>
 38e:	87 95       	ror	r24
 390:	77 95       	ror	r23
 392:	67 95       	ror	r22
 394:	b7 95       	ror	r27
 396:	88 0f       	add	r24, r24
 398:	91 1d       	adc	r25, r1
 39a:	96 95       	lsr	r25
 39c:	87 95       	ror	r24
 39e:	97 f9       	bld	r25, 7
 3a0:	08 95       	ret

000003a2 <eeprom_write_word>:
 3a2:	0e 94 d6 01 	call	0x3ac	; 0x3ac <eeprom_write_byte>
 3a6:	27 2f       	mov	r18, r23
 3a8:	0c 94 d7 01 	jmp	0x3ae	; 0x3ae <eeprom_write_r18>

000003ac <eeprom_write_byte>:
 3ac:	26 2f       	mov	r18, r22

000003ae <eeprom_write_r18>:
 3ae:	f9 99       	sbic	0x1f, 1	; 31
 3b0:	fe cf       	rjmp	.-4      	; 0x3ae <eeprom_write_r18>
 3b2:	1f ba       	out	0x1f, r1	; 31
 3b4:	92 bd       	out	0x22, r25	; 34
 3b6:	81 bd       	out	0x21, r24	; 33
 3b8:	20 bd       	out	0x20, r18	; 32
 3ba:	0f b6       	in	r0, 0x3f	; 63
 3bc:	f8 94       	cli
 3be:	fa 9a       	sbi	0x1f, 2	; 31
 3c0:	f9 9a       	sbi	0x1f, 1	; 31
 3c2:	0f be       	out	0x3f, r0	; 63
 3c4:	01 96       	adiw	r24, 0x01	; 1
 3c6:	08 95       	ret

000003c8 <_exit>:
 3c8:	f8 94       	cli

000003ca <__stop_program>:
 3ca:	ff cf       	rjmp	.-2      	; 0x3ca <__stop_program>
