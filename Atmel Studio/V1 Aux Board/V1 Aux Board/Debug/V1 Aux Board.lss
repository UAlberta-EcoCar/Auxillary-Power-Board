
V1 Aux Board.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000146  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000f2  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000146  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000178  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000068  00000000  00000000  000001b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000009ab  00000000  00000000  00000220  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000812  00000000  00000000  00000bcb  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000037d  00000000  00000000  000013dd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000a0  00000000  00000000  0000175c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000048b  00000000  00000000  000017fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000109  00000000  00000000  00001c87  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  00001d90  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 61 00 	call	0xc2	; 0xc2 <main>
  78:	0c 94 77 00 	jmp	0xee	; 0xee <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <writeEEPROM>:
//gets the output current in Amps (same idea as getVoltage)
double getCurrent(void){
	
	double current;
	struct ADCOut reading;
	reading = ADCRead(0x00);  //Current reading is on ADC0
  80:	08 95       	ret

00000082 <ADCRead>:
  82:	e4 e6       	ldi	r30, 0x64	; 100
  84:	f0 e0       	ldi	r31, 0x00	; 0
  86:	90 81       	ld	r25, Z
  88:	9e 7f       	andi	r25, 0xFE	; 254
  8a:	90 83       	st	Z, r25
  8c:	eb e7       	ldi	r30, 0x7B	; 123
  8e:	f0 e0       	ldi	r31, 0x00	; 0
  90:	90 81       	ld	r25, Z
  92:	10 82       	st	Z, r1
  94:	ea e7       	ldi	r30, 0x7A	; 122
  96:	f0 e0       	ldi	r31, 0x00	; 0
  98:	90 81       	ld	r25, Z
  9a:	97 6a       	ori	r25, 0xA7	; 167
  9c:	90 83       	st	Z, r25
  9e:	ac e7       	ldi	r26, 0x7C	; 124
  a0:	b0 e0       	ldi	r27, 0x00	; 0
  a2:	9c 91       	ld	r25, X
  a4:	90 74       	andi	r25, 0x40	; 64
  a6:	9c 93       	st	X, r25
  a8:	9c 91       	ld	r25, X
  aa:	89 2b       	or	r24, r25
  ac:	8c 93       	st	X, r24
  ae:	80 81       	ld	r24, Z
  b0:	80 64       	ori	r24, 0x40	; 64
  b2:	80 83       	st	Z, r24
  b4:	80 81       	ld	r24, Z
  b6:	fe cf       	rjmp	.-4      	; 0xb4 <ADCRead+0x32>

000000b8 <getVoltage>:
  b8:	81 e0       	ldi	r24, 0x01	; 1
  ba:	0e 94 41 00 	call	0x82	; 0x82 <ADCRead>

000000be <getPower>:
//Currently doesn't include losses in pMOSs and battery
double getPower(void){
	
	double power;
	
	power = getVoltage() * getCurrent();
  be:	0e 94 5c 00 	call	0xb8	; 0xb8 <getVoltage>

000000c2 <main>:
	sized values into the EEPROM. Future revisions may 
	include support for a LED display. (maybe next year!)
*************************************************************/

int main(void)
{
  c2:	cf 93       	push	r28
  c4:	c0 e1       	ldi	r28, 0x10	; 16
	double powerout;
	uint8_t i;      //indexing variable
	uint16_t eeprom_address = 0; //address of the eeprom (might make constant)
	
	for (i = 0; i < 127 ; i = i + 8){        // We got 1K EEPROM. So for a double thats 8bytes, therefore we have 128 spots. might use ints in the future for double the space.
		powerout = getPower();				 // Get the power reading from the ADC
  c6:	0e 94 5f 00 	call	0xbe	; 0xbe <getPower>
  ca:	ab 01       	movw	r20, r22
  cc:	bc 01       	movw	r22, r24
		writeEEPROM(eeprom_address * i, powerout);   // Write this value to the EEPROM to read later
  ce:	80 e0       	ldi	r24, 0x00	; 0
  d0:	90 e0       	ldi	r25, 0x00	; 0
  d2:	0e 94 40 00 	call	0x80	; 0x80 <writeEEPROM>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  d6:	8f e4       	ldi	r24, 0x4F	; 79
  d8:	93 ec       	ldi	r25, 0xC3	; 195
  da:	01 97       	sbiw	r24, 0x01	; 1
  dc:	f1 f7       	brne	.-4      	; 0xda <main+0x18>
  de:	00 c0       	rjmp	.+0      	; 0xe0 <main+0x1e>
  e0:	00 00       	nop
  e2:	c1 50       	subi	r28, 0x01	; 1
{
	double powerout;
	uint8_t i;      //indexing variable
	uint16_t eeprom_address = 0; //address of the eeprom (might make constant)
	
	for (i = 0; i < 127 ; i = i + 8){        // We got 1K EEPROM. So for a double thats 8bytes, therefore we have 128 spots. might use ints in the future for double the space.
  e4:	81 f7       	brne	.-32     	; 0xc6 <main+0x4>
		_delay_ms(100);                      // Delay to get a better range of values.
	}
	
	
	return 0;
}
  e6:	80 e0       	ldi	r24, 0x00	; 0
  e8:	90 e0       	ldi	r25, 0x00	; 0
  ea:	cf 91       	pop	r28
  ec:	08 95       	ret

000000ee <_exit>:
  ee:	f8 94       	cli

000000f0 <__stop_program>:
  f0:	ff cf       	rjmp	.-2      	; 0xf0 <__stop_program>
